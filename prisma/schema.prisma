// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role      @default(PATIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  patient  Patient?
  doctor   Doctor?
  accounts Account[]
  sessions Session[]
  posts    Post[]     @relation("UserPosts")
  orders   Order[]    @relation("UserOrders")
  Review   Review[]
  Wishlist Wishlist[]
}

// Blog Post
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  imageUrl  String?
  category  String?
  author    User     @relation("UserPosts", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Product
model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  price          Decimal
  stock          Int      @default(0)
  digitalFileUrl String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  images     ProductImage[]
  category   Category?      @relation(fields: [categoryId], references: [id])
  categoryId String?
  orderItems OrderItem[]
  reviews    Review[]
  wishlists  Wishlist[]
}

model ProductImage {
  id        String   @id @default(cuid())
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Order
model Order {
  id              String        @id @default(cuid())
  user            User          @relation("UserOrders", fields: [userId], references: [id])
  userId          String
  totalAmount     Decimal
  status          OrderStatus   @default(PENDING)
  shippingAddress Json?
  paymentMethod   PaymentMethod
  orderItems      OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Order Item (Junction table for Order and Product)
model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal // Price at the time of order
}

model Patient {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dateOfBirth DateTime?
  phone       String?
  address     String?
  bloodGroup  String?
  allergies   String[]
  medications String[]

  appointments   Appointment[]
  prescriptions  Prescription[]
  medicalRecords MedicalRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  specialization  String
  qualification   String
  experience      Int
  consultationFee Decimal
  availability    Json

  appointments  Appointment[]
  prescriptions Prescription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id        String  @id @default(cuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor  @relation(fields: [doctorId], references: [id])

  date   DateTime
  type   AppointmentType
  status AppointmentStatus @default(PENDING)
  reason String
  notes  String?

  prescription Prescription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Prescription {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  medications  Json
  instructions String
  validUntil   DateTime

  createdAt DateTime @default(now())
}

model MedicalRecord {
  id        String  @id @default(cuid())
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  type        String
  title       String
  description String?
  files       String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentType {
  IN_PERSON
  VIDEO
  PHONE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
  REFUNDED
}

model DeliverySetting {
  id                    String   @id @default(cuid())
  insideDhaka           Decimal
  outsideDhaka          Decimal
  freeDeliveryThreshold Decimal
  updatedAt             DateTime @updatedAt
}

enum PaymentMethod {
  DIGITAL_PAYMENT
  PAY_AFTER_DELIVERY
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
