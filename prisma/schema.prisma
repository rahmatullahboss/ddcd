// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  role            Role      @default(PATIENT)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  patient         Patient?
  doctor          Doctor?
  accounts        Account[]
  sessions        Session[]
}

model Patient {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  dateOfBirth     DateTime?
  phone           String?
  address         String?
  bloodGroup      String?
  allergies       String[]
  medications     String[]
  
  appointments    Appointment[]
  prescriptions   Prescription[]
  medicalRecords  MedicalRecord[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Doctor {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialization  String
  qualification   String
  experience      Int
  consultationFee Decimal
  availability    Json
  
  appointments    Appointment[]
  prescriptions   Prescription[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Appointment {
  id              String    @id @default(cuid())
  patientId       String
  patient         Patient   @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor    @relation(fields: [doctorId], references: [id])
  
  date            DateTime
  type            AppointmentType
  status          AppointmentStatus @default(PENDING)
  reason          String
  notes           String?
  
  prescription    Prescription?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Prescription {
  id              String    @id @default(cuid())
  appointmentId   String    @unique
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  patientId       String
  patient         Patient   @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor    @relation(fields: [doctorId], references: [id])
  
  medications     Json
  instructions    String
  validUntil      DateTime
  
  createdAt       DateTime  @default(now())
}

model MedicalRecord {
  id              String    @id @default(cuid())
  patientId       String
  patient         Patient   @relation(fields: [patientId], references: [id])
  
  type            String
  title           String
  description     String?
  files           String[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentType {
  IN_PERSON
  VIDEO
  PHONE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}